--[=[
	
	 ________  ________  ________   _________  _______   ________   ________          ___  ___  ___  ___  ________     
	|\   ____\|\   __  \|\   ___  \|\___   ___\\  ___ \ |\   ___  \|\   ____\        |\  \|\  \|\  \|\  \|\   __  \    
	\ \  \___|\ \  \|\  \ \  \\ \  \|___ \  \_\ \   __/|\ \  \\ \  \ \  \___|        \ \  \\\  \ \  \\\  \ \  \|\ /_   
	 \ \  \  __\ \   __  \ \  \\ \  \   \ \  \ \ \  \_|/_\ \  \\ \  \ \  \  ___       \ \   __  \ \  \\\  \ \   __  \  
	  \ \  \|\  \ \  \ \  \ \  \\ \  \   \ \  \ \ \  \_|\ \ \  \\ \  \ \  \|\  \       \ \  \ \  \ \  \\\  \ \  \|\  \ 
	   \ \_______\ \__\ \__\ \__\\ \__\   \ \__\ \ \_______\ \__\\ \__\ \_______\       \ \__\ \__\ \_______\ \_______\
	    \|_______|\|__|\|__|\|__| \|__|    \|__|  \|_______|\|__| \|__|\|_______|        \|__|\|__|\|_______|\|_______|
                                                                                                                   
                                                                                                                   
                                                                                                                   
	 _____ ______   ________  ________   ___  _________  ________  ________                                            
	|\   _ \  _   \|\   __  \|\   ___  \|\  \|\___   ___\\   __  \|\   __  \                                           
	\ \  \\\__\ \  \ \  \|\  \ \  \\ \  \ \  \|___ \  \_\ \  \|\  \ \  \|\  \                                          
	 \ \  \\|__| \  \ \  \\\  \ \  \\ \  \ \  \   \ \  \ \ \  \\\  \ \   _  _\                                         
	  \ \  \    \ \  \ \  \\\  \ \  \\ \  \ \  \   \ \  \ \ \  \\\  \ \  \\  \|                                        
	   \ \__\    \ \__\ \_______\ \__\\ \__\ \__\   \ \__\ \ \_______\ \__\\ _\                                        
	    \|__|     \|__|\|_______|\|__| \|__|\|__|    \|__|  \|_______|\|__|\|__|                                       
                                                                                                                                                                                                                                                                                                                                                 
]=]

-- Instances: 25 | Scripts: 0 | Modules: 1 | Tags: 0
local GH_Monitor = {};

-- GantengMonitor
GH_Monitor["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
GH_Monitor["1"]["IgnoreGuiInset"] = true;
GH_Monitor["1"]["ScreenInsets"] = Enum.ScreenInsets.DeviceSafeInsets;
GH_Monitor["1"]["Name"] = [[GantengMonitor]];
GH_Monitor["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;


-- GantengMonitor.MainFrame
GH_Monitor["2"] = Instance.new("Frame", GH_Monitor["1"]);
GH_Monitor["2"]["BorderSizePixel"] = 0;
GH_Monitor["2"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GH_Monitor["2"]["AutomaticSize"] = Enum.AutomaticSize.Y;
GH_Monitor["2"]["Size"] = UDim2.new(0, 245, 0, 121);
GH_Monitor["2"]["Position"] = UDim2.new(0.33221, 0, 0.10196, 0);
GH_Monitor["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GH_Monitor["2"]["Name"] = [[MainFrame]];
GH_Monitor["2"]["BackgroundTransparency"] = 0.8;


-- GantengMonitor.MainFrame.UICorner
GH_Monitor["3"] = Instance.new("UICorner", GH_Monitor["2"]);
GH_Monitor["3"]["CornerRadius"] = UDim.new(0, 10);


-- GantengMonitor.MainFrame.DropShadowHolder
GH_Monitor["4"] = Instance.new("Frame", GH_Monitor["2"]);
GH_Monitor["4"]["ZIndex"] = -2;
GH_Monitor["4"]["BorderSizePixel"] = 0;
GH_Monitor["4"]["Size"] = UDim2.new(0, 245, 0, 121);
GH_Monitor["4"]["Name"] = [[DropShadowHolder]];
GH_Monitor["4"]["BackgroundTransparency"] = 1;


-- GantengMonitor.MainFrame.DropShadowHolder.DropShadow
GH_Monitor["5"] = Instance.new("ImageLabel", GH_Monitor["4"]);
GH_Monitor["5"]["ZIndex"] = 0;
GH_Monitor["5"]["BorderSizePixel"] = 0;
GH_Monitor["5"]["SliceCenter"] = Rect.new(49, 49, 450, 450);
GH_Monitor["5"]["ScaleType"] = Enum.ScaleType.Slice;
GH_Monitor["5"]["ImageTransparency"] = 0.5;
GH_Monitor["5"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
GH_Monitor["5"]["Image"] = [[rbxassetid://6014261993]];
GH_Monitor["5"]["Size"] = UDim2.new(1, 47, 1, 47);
GH_Monitor["5"]["BackgroundTransparency"] = 1;
GH_Monitor["5"]["Name"] = [[DropShadow]];
GH_Monitor["5"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);


-- GantengMonitor.MainFrame.DropShadowHolder.DropShadow.UIGradient
GH_Monitor["6"] = Instance.new("UIGradient", GH_Monitor["5"]);
GH_Monitor["6"]["Rotation"] = 90;
GH_Monitor["6"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(36, 36, 36)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};


-- GantengMonitor.MainFrame.TopFrame
GH_Monitor["7"] = Instance.new("TextButton", GH_Monitor["2"]);
GH_Monitor["7"]["BorderSizePixel"] = 0;
GH_Monitor["7"]["AutoButtonColor"] = false;
GH_Monitor["7"]["BackgroundColor3"] = Color3.fromRGB(26, 26, 26);
GH_Monitor["7"]["Selectable"] = false;
GH_Monitor["7"]["Size"] = UDim2.new(0, 245, 0, 26);
GH_Monitor["7"]["Name"] = [[TopFrame]];
GH_Monitor["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GH_Monitor["7"]["Text"] = [[]];


-- GantengMonitor.MainFrame.TopFrame.UICorner
GH_Monitor["8"] = Instance.new("UICorner", GH_Monitor["7"]);
GH_Monitor["8"]["CornerRadius"] = UDim.new(0, 10);


-- GantengMonitor.MainFrame.TopFrame.TextLabel
GH_Monitor["9"] = Instance.new("TextLabel", GH_Monitor["7"]);
GH_Monitor["9"]["BorderSizePixel"] = 0;
GH_Monitor["9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GH_Monitor["9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GH_Monitor["9"]["TextSize"] = 14;
GH_Monitor["9"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Bold, Enum.FontStyle.Normal);
GH_Monitor["9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GH_Monitor["9"]["BackgroundTransparency"] = 1;
GH_Monitor["9"]["RichText"] = true;
GH_Monitor["9"]["Size"] = UDim2.new(0, 245, 0, 26);
GH_Monitor["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GH_Monitor["9"]["Text"] = [[Ganteng Hub | Monitor]];


-- GantengMonitor.MainFrame.TopFrame.TextLabel.UIPadding
GH_Monitor["a"] = Instance.new("UIPadding", GH_Monitor["9"]);
GH_Monitor["a"]["PaddingLeft"] = UDim.new(0, 8);


-- GantengMonitor.MainFrame.TopFrame.TextLabel.UIGradient
GH_Monitor["b"] = Instance.new("UIGradient", GH_Monitor["9"]);
GH_Monitor["b"]["Rotation"] = 90;
GH_Monitor["b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(60, 60, 60))};


-- GantengMonitor.MainFrame.TopFrame.SquareCorner
GH_Monitor["c"] = Instance.new("Frame", GH_Monitor["7"]);
GH_Monitor["c"]["ZIndex"] = -1;
GH_Monitor["c"]["BorderSizePixel"] = 0;
GH_Monitor["c"]["BackgroundColor3"] = Color3.fromRGB(26, 26, 26);
GH_Monitor["c"]["Size"] = UDim2.new(0, 245, 0, 8);
GH_Monitor["c"]["Position"] = UDim2.new(0, 0, 0.68722, 0);
GH_Monitor["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GH_Monitor["c"]["Name"] = [[SquareCorner]];


-- GantengMonitor.MainFrame.UIGradient
GH_Monitor["d"] = Instance.new("UIGradient", GH_Monitor["2"]);
GH_Monitor["d"]["Rotation"] = 90;
GH_Monitor["d"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(136, 136, 136)),ColorSequenceKeypoint.new(0.560, Color3.fromRGB(35, 35, 35)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(0, 0, 0))};


-- GantengMonitor.MainFrame.ItemFrame
GH_Monitor["e"] = Instance.new("Frame", GH_Monitor["2"]);
GH_Monitor["e"]["BorderSizePixel"] = 0;
GH_Monitor["e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GH_Monitor["e"]["AutomaticSize"] = Enum.AutomaticSize.Y;
GH_Monitor["e"]["Size"] = UDim2.new(0, 245, 0, 95);
GH_Monitor["e"]["Position"] = UDim2.new(0, 0, 0, 26);
GH_Monitor["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GH_Monitor["e"]["Name"] = [[ItemFrame]];
GH_Monitor["e"]["BackgroundTransparency"] = 1;


-- GantengMonitor.MainFrame.ItemFrame.UIListLayout
GH_Monitor["f"] = Instance.new("UIListLayout", GH_Monitor["e"]);
GH_Monitor["f"]["SortOrder"] = Enum.SortOrder.LayoutOrder;


-- GantengMonitor.MainFrame.ItemFrame.UIPadding
GH_Monitor["10"] = Instance.new("UIPadding", GH_Monitor["e"]);
GH_Monitor["10"]["PaddingTop"] = UDim.new(0, 5);
GH_Monitor["10"]["PaddingBottom"] = UDim.new(0, 5);


-- GantengMonitor.LIBRARY
GH_Monitor["11"] = Instance.new("ModuleScript", GH_Monitor["1"]);
GH_Monitor["11"]["Name"] = [[LIBRARY]];


-- GantengMonitor.InfoItem
GH_Monitor["12"] = Instance.new("Frame", GH_Monitor["1"]);
GH_Monitor["12"]["Visible"] = false;
GH_Monitor["12"]["BorderSizePixel"] = 0;
GH_Monitor["12"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GH_Monitor["12"]["Size"] = UDim2.new(0, 245, 0, 16);
GH_Monitor["12"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GH_Monitor["12"]["Name"] = [[InfoItem]];
GH_Monitor["12"]["BackgroundTransparency"] = 1;


-- GantengMonitor.InfoItem.UIListLayout
GH_Monitor["13"] = Instance.new("UIListLayout", GH_Monitor["12"]);
GH_Monitor["13"]["Padding"] = UDim.new(0, 8);
GH_Monitor["13"]["VerticalAlignment"] = Enum.VerticalAlignment.Center;
GH_Monitor["13"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
GH_Monitor["13"]["FillDirection"] = Enum.FillDirection.Horizontal;


-- GantengMonitor.InfoItem.UIPadding
GH_Monitor["14"] = Instance.new("UIPadding", GH_Monitor["12"]);
GH_Monitor["14"]["PaddingLeft"] = UDim.new(0, 15);


-- GantengMonitor.InfoItem.ImageLabel
GH_Monitor["15"] = Instance.new("ImageLabel", GH_Monitor["12"]);
GH_Monitor["15"]["BorderSizePixel"] = 0;
GH_Monitor["15"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GH_Monitor["15"]["Image"] = [[http://www.roblox.com/asset/?id=16307805649]];
GH_Monitor["15"]["Size"] = UDim2.new(0, 8, 0, 10);
GH_Monitor["15"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GH_Monitor["15"]["BackgroundTransparency"] = 1;
GH_Monitor["15"]["Position"] = UDim2.new(0, 0, 0.3125, 0);


-- GantengMonitor.InfoItem.ImageLabel.UIAspectRatioConstraint
GH_Monitor["16"] = Instance.new("UIAspectRatioConstraint", GH_Monitor["15"]);



-- GantengMonitor.InfoItem.ImageLabel.UIGradient
GH_Monitor["17"] = Instance.new("UIGradient", GH_Monitor["15"]);
GH_Monitor["17"]["Rotation"] = 90;
GH_Monitor["17"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(136, 136, 136))};


-- GantengMonitor.InfoItem.TextLabel
GH_Monitor["18"] = Instance.new("TextLabel", GH_Monitor["12"]);
GH_Monitor["18"]["BorderSizePixel"] = 0;
GH_Monitor["18"]["TextXAlignment"] = Enum.TextXAlignment.Left;
GH_Monitor["18"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
GH_Monitor["18"]["TextSize"] = 12;
GH_Monitor["18"]["FontFace"] = Font.new([[rbxasset://fonts/families/GothamSSm.json]], Enum.FontWeight.Medium, Enum.FontStyle.Normal);
GH_Monitor["18"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
GH_Monitor["18"]["BackgroundTransparency"] = 1;
GH_Monitor["18"]["RichText"] = true;
GH_Monitor["18"]["Size"] = UDim2.new(0, 226, 0, 9);
GH_Monitor["18"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
GH_Monitor["18"]["Text"] = [[info1: none]];
GH_Monitor["18"]["Position"] = UDim2.new(0.07755, 0, 0.25, 0);


-- GantengMonitor.InfoItem.TextLabel.UIGradient
GH_Monitor["19"] = Instance.new("UIGradient", GH_Monitor["18"]);
GH_Monitor["19"]["Rotation"] = 90;
GH_Monitor["19"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(255, 255, 255)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(151, 151, 151))};


-- Require GH_Monitor wrapper
local GH_Monitor_REQUIRE = require;
local GH_Monitor_MODULES = {};
local function require(Module:ModuleScript)
	local ModuleState = GH_Monitor_MODULES[Module];
	if ModuleState then
		if not ModuleState.Required then
			ModuleState.Required = true;
			ModuleState.Value = ModuleState.Closure();
		end
		return ModuleState.Value;
	end;
	return GH_Monitor_REQUIRE(Module);
end

GH_Monitor_MODULES[GH_Monitor["11"]] = {
	Closure = function()
		local script = GH_Monitor["11"];local module = {}
		local MainFrame = script.Parent.MainFrame
		local Parent = script.Parent

		local tsv = game:GetService("TweenService")
		local topbarobject = MainFrame.TopFrame
		local object = MainFrame
		local Dragging = nil
		local DragInput = nil
		local DragStart = nil
		local StartPosition = nil

		MainFrame:GetPropertyChangedSignal("AbsoluteSize"):Connect(function()
			MainFrame.DropShadowHolder.Size = UDim2.new(0, MainFrame.AbsoluteSize.X, 0, MainFrame.AbsoluteSize.Y)
		end)

		local function Update(input)
			local Delta = input.Position - DragStart
			local pos =
				UDim2.new(
					StartPosition.X.Scale,
					StartPosition.X.Offset + Delta.X,
					StartPosition.Y.Scale,
					StartPosition.Y.Offset + Delta.Y
				)
			tsv:Create(object, TweenInfo.new(0.2,Enum.EasingStyle.Quart), {Position = pos}):Play()
			--object.Position = pos
		end

		topbarobject.InputBegan:Connect(
			function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					Dragging = true
					DragStart = input.Position
					StartPosition = object.Position

					input.Changed:Connect(
						function()
							if input.UserInputState == Enum.UserInputState.End then
								Dragging = false
							end
						end
					)
				end
			end
		)

		topbarobject.InputChanged:Connect(
			function(input)
				if
					input.UserInputType == Enum.UserInputType.MouseMovement or
					input.UserInputType == Enum.UserInputType.Touch
				then
					DragInput = input
				end
			end
		)

		game:GetService("UserInputService").InputChanged:Connect(
			function(input)
				if input == DragInput and Dragging then
					Update(input)
				end
			end
		)


		function module:AddInfo(name, text, icon)
			local self = {}

			if not name or not text then
				error('No args were inserted (AddInfo). Missing arg[1]: Name')
			end

			local newInfo = Parent.InfoItem:Clone()
			newInfo.Name = name
			if icon then
				newInfo.ImageLabel.Image = icon
			end

			if not text then
				newInfo.TextLabel.Text = name..": "..text
			else
				newInfo.TextLabel.Text = name..": "..text
			end
			newInfo.Parent = MainFrame.ItemFrame
			newInfo.Visible = true


			function self:Update(NewName, NewText)
				name = NewName
				text = NewText
				newInfo.TextLabel.Text = name..": "..text
			end

			function self:UpdateInfo(NewText)
				text = NewText
				newInfo.TextLabel.Text = name..": "..text
			end
			function self:UpdateName(NewName)
				name = NewName
				newInfo.TextLabel.Text = name..": "..text
			end

			function self:Hide()
				newInfo.Visible = false
			end
			function self:Show()
				newInfo.Visible = true
			end
			function self:Destroy()
				newInfo:Destroy()
			end
			return self
		end
		function module:AddText(text, icon)
			local self = {}


			if not text then
				error('No args were inserted (AddInfo). Missing arg[1]: Text')
			end

			local newInfo = Parent.InfoItem:Clone()
			newInfo.Name = text
			if icon then
				newInfo.ImageLabel.Image = icon
			end

			newInfo.TextLabel.Text = text
			newInfo.Parent = MainFrame.ItemFrame
			newInfo.Visible = true

			function self:UpdateText(NewText)
				text = NewText
				newInfo.TextLabel.Text = text
			end
			function self:Hide()
				newInfo.Visible = false
			end
			function self:Show()
				newInfo.Visible = true
			end
			function self:Destroy()
				newInfo:Destroy()
			end
			return self
		end
		function module:Destroy()
			Parent:Destroy()
		end
		function module:Hide()
			Parent.Enabled = false
		end
		function module:Show()
			Parent.Enabled = true
		end

		return module

	end;
};

return require(GH_Monitor["11"])
